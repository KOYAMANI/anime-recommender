name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ROLE_ID }}:role/roleAdmin
          role-skip-session-tagging: true
          role-duration-seconds: 14400

      - name: Use default docker context
        run: |
          docker context use default
        shell: bash

      - name: Checkout latest repo
        uses: actions/checkout@master

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Set envitonment variables

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: your-ecr-repository-name
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build
          docker-compose -f docker-compose.yml up --build

          # Push 
          docker compose -f docker-compose.yml push

          # Deploy the application to ECS and handle error cases
          echo "ECS deployment starting..."
          docker compose -f docker-compose.yml up 2>error_output.txt || { grep -q "The submitted information didn't contain changes. Submit different information to create a change set." error_output.txt && echo "ECS deployment ignored due to no changes." || (cat error_output.txt && exit 1); }
          echo "ECS deployment successful! :)"0

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: your-container-name
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: your-service-name
          cluster: your-cluster-name
